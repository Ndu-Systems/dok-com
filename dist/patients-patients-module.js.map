{"version":3,"sources":["webpack:///./node_modules/ng2-search-filter/ng2-search-filter.es5.js","webpack:///./node_modules/ngx-pagination/dist/ngx-pagination.js","webpack:///./src/app/views/patients/add-patient/add-patient.component.html","webpack:///./src/app/views/patients/add-patient/add-patient.component.scss","webpack:///./src/app/views/patients/add-patient/add-patient.component.ts","webpack:///./src/app/views/patients/add-patient/index.ts","webpack:///./src/app/views/patients/list-patients/index.ts","webpack:///./src/app/views/patients/list-patients/list-patients.component.html","webpack:///./src/app/views/patients/list-patients/list-patients.component.scss","webpack:///./src/app/views/patients/list-patients/list-patients.component.ts","webpack:///./src/app/views/patients/patients.module.ts","webpack:///./src/app/views/patients/patients.routing.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAqC;AACrC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA;AACA,aAAa,IAAI;AACjB,KAAK,iEAAmB;AACxB;AACA;AACA;AACA;AACA,4CAA4C,WAAW;AACvD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA,kDAAkD,WAAW;AAC7D;AACA;AACA;AACQ;AACR;;;;;;;;;;;;;;;;;;;;;;;ACnE2I;AACpH;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8CAA8C,EAAE;AAC5G;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,+CAA+C;AAC/C,SAAS,2BAA2B;AACpC,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,yvBAAyvB,iBAAiB,+BAA+B,yBAAyB,2FAA2F,iBAAiB,+BAA+B,yBAAyB,mGAAmG,kBAAkB,KAAK,mBAAmB,6XAA6X,yBAAyB,kCAAkC,cAAc,6IAA6I,4BAA4B,kCAAkC,cAAc,wVAAwV,aAAa,+BAA+B,yBAAyB,2FAA2F,aAAa,+BAA+B,yBAAyB;AAC/0E,yCAAyC,mBAAmB,wBAAwB,EAAE,qDAAqD,mBAAmB,qBAAqB,EAAE,4BAA4B,kBAAkB,EAAE,wBAAwB,6BAA6B,gCAAgC,4BAA4B,8BAA8B,uBAAuB,EAAE,wBAAwB,4BAA4B,EAAE,kDAAkD,qBAAqB,sBAAsB,kCAAkC,uBAAuB,EAAE,kEAAkE,4BAA4B,EAAE,8BAA8B,kCAAkC,0BAA0B,qBAAqB,sBAAsB,EAAE,+BAA+B,kCAAkC,qBAAqB,sBAAsB,EAAE,wCAAwC,gCAAgC,EAAE,+CAA+C,sBAAsB,EAAE,4GAA4G,uBAAuB,0BAA0B,yBAAyB,EAAE,kGAAkG,sBAAsB,0BAA0B,wBAAwB,EAAE,kCAAkC,kCAAkC,eAAe,gBAAgB,qBAAqB,2BAA2B,EAAE,iCAAiC,kBAAkB,EAAE,wCAAwC,8CAA8C,4BAA4B,EAAE,uGAAuG,oBAAoB,EAAE,GAAG;;AAEn2D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,8DAA8D,WAAW;AACzE;AACA,gBAAgB,4DAAc;AAC9B,qBAAqB,4DAAc;AACnC,4BAA4B,4DAAc;AAC1C,sBAAsB,4DAAc;AACpC,wBAAwB,4DAAc;AACtC,2BAA2B,4DAAc;AACzC,uBAAuB,4DAAc;AACrC,yCAAyC,4DAAc;AACvD,mCAAmC,4DAAc;AACjD,sCAAsC,4DAAc;AACpD,wBAAwB,6DAAe;AACvaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,8DAA8D;AAC9D,SAAS,2BAA2B;AACpC,SAAS,yEAA2B;AACpC,MAAM;AACN;AACA,gBAAgB,4DAAc;AAC9B,qBAAqB,4DAAc;AACnC,wBAAwB,6DAAe;AACvC;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,sDAAsD,WAAW;AACjE;AACA,CAAC;;AAED;AACA;AACA;;AAEQ;;;;;;;;;;;;ACrhBR,ygBAAygB,KAAK,slBAAslB,iBAAiB,szBAAszB,iBAAiB,gzBAAgzB,iBAAiB,szBAAszB,iBAAiB,60BAA60B,iBAAiB,80BAA80B,iBAAiB,00BAA00B,iBAAiB,kzBAAkzB,iBAAiB,4yBAA4yB,iBAAiB,8WAA8W,gP;;;;;;;;;;;ACA1kQ,2CAA2C,6BAA6B,uCAAuC,oBAAoB,EAAE,kBAAkB,wBAAwB,mBAAmB,4CAA4C,oBAAoB,sBAAsB,oBAAoB,EAAE,0FAA0F,mBAAmB,8BAA8B,kBAAkB,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;;;ACA3Z;AACT;AACU;AAQnD;IAYE,6BAAwB,MAAe,EACf,cAA8B;QAD9B,WAAM,GAAN,MAAM,CAAS;QACf,mBAAc,GAAd,cAAc,CAAgB;IAErD,CAAC;IAEF,sCAAQ,GAAR;IACA,CAAC;IAED,iCAAG,GAAH;QACE,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,EAAE,EAAC,IAAI,CAAC,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,GAAG,GAAG,gCAAgC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,EAAE,EAAC,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,SAAS,KAAK,EAAE,CAAC,CAAC,CAAC;YACzD,IAAI,CAAC,GAAG,GAAG,gCAAgC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,EAAE,EAAC,IAAI,CAAC,OAAO,KAAK,SAAS,IAAI,IAAI,CAAC,OAAO,KAAK,EAAE,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,GAAG,GAAG,gCAAgC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,EAAE,EAAC,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,SAAS,KAAK,EAAE,CAAC,CAAC,CAAC;YACzD,IAAI,CAAC,GAAG,GAAG,gCAAgC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,EAAE,EAAC,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,CAAC,CAAC,CAAC;YAC/D,IAAI,CAAC,GAAG,GAAG,gCAAgC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,EAAE,EAAC,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,CAAC,CAAC,CAAC;YAC/D,IAAI,CAAC,GAAG,GAAG,gCAAgC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,EAAE,EAAC,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,CAAC,CAAC,CAAC;YAC/D,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;QAC1B,CAAC;QACD,EAAE,EAAC,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,GAAG,GAAG,gCAAgC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,EAAE,EAAC,IAAI,CAAC,QAAQ,KAAK,SAAS,IAAI,IAAI,CAAC,QAAQ,KAAK,EAAE,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,GAAG,GAAG,gCAAgC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,IAAI,IAAI,GAAG;YACT,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;SAQxB,CAAC;QACD,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC;aACnC,SAAS,CAAC,kBAAQ;YAChB,EAAE,EAAC,QAAQ,IAAI,CAAC,CAAC,EAAC;gBAChB,KAAK,CAAE,4BAA4B,CAAC;YACtC,CAAC;QACJ,CAAC,CAAC,CAAC;IAEN,CAAC;IAnFU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;;;SAG5B,CAAC;yCAaiC,sDAAM;YACC,wDAAc;OAb3C,mBAAmB,CAqF/B;IAAD,0BAAC;CAAA;AArF+B;;;;;;;;;;;;;;;;;ACVO;;;;;;;;;;;;;;;;;ACAE;;;;;;;;;;;;ACAzC,40BAA40B,iBAAiB,wuBAAwuB,mCAAmC,2CAA2C,gBAAgB,+BAA+B,gBAAgB,+BAA+B,cAAc,+BAA+B,YAAY,+BAA+B,gBAAgB,+BAA+B,WAAW,wT;;;;;;;;;;;ACAn4D,2CAA2C,6BAA6B,uCAAuC,oBAAoB,EAAE,kBAAkB,wBAAwB,mBAAmB,4CAA4C,oBAAoB,sBAAsB,oBAAoB,EAAE,0FAA0F,mBAAmB,8BAA8B,kBAAkB,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;;ACA3Z;AACF;AAShD;IAIE,+BACU,aAA6B;QAA7B,kBAAa,GAAb,aAAa,CAAgB;IACnC,CAAC;IAEL,wCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,uDAAuD,CAAC,CAAC;IACtG,CAAC;IAVU,qBAAqB;QALjC,+DAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;;;SAG9B,CAAC;yCAM0B,qDAAa;OAL5B,qBAAqB,CAYjC;IAAD,4BAAC;CAAA;AAZiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVkB;AACX;AACM;AACC;AACkB;AACV;AACL;AACK;AACJ;AACJ;AAYhD;IAAA;IAA6B,CAAC;IAAjB,cAAc;QAP1B,8DAAQ,CAAC;YACN,OAAO,EAAE,CAAC,4DAAY,EAAC,0DAAW,EAAC,qEAAmB,EAAC,kEAAmB;gBACtE,kEAAmB,EAAE,gEAAc,EAAE,wDAAgB,CAAE;YAC3D,YAAY,EAAE,CAAC,oEAAqB,EAAE,gEAAmB,CAAC;YAC1D,SAAS,EAAE,CAAC,wDAAc,CAAC;SAC9B,CAAC;OAEW,cAAc,CAAG;IAAD,qBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;ACrBc;AACc;AACC;AACJ;AAIpD,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAG,oEAAqB;KAC5C;IACD;QACE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAG,gEAAmB;KAC7C;CACF,CAAC;AAOF;IAAA;IAA6B,CAAC;IAAjB,cAAc;QAL1B,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OAEW,cAAc,CAAG;IAAD,qBAAC;CAAA;AAAH","file":"patients-patients-module.js","sourcesContent":["import { Injectable, NgModule, Pipe } from '@angular/core';\nvar Ng2SearchPipe = /** @class */ (function () {\n    function Ng2SearchPipe() {\n    }\n    /**\n     * @param {?} items object from array\n     * @param {?} term term's search\n     * @return {?}\n     */\n    Ng2SearchPipe.prototype.transform = function (items, term) {\n        if (!term || !items)\n            return items;\n        return Ng2SearchPipe.filter(items, term);\n    };\n    /**\n     *\n     * @param {?} items List of items to filter\n     * @param {?} term  a string term to compare with every property of the list\n     *\n     * @return {?}\n     */\n    Ng2SearchPipe.filter = function (items, term) {\n        var /** @type {?} */ toCompare = term.toLowerCase();\n        return items.filter(function (item) {\n            for (var /** @type {?} */ property in item) {\n                if (item[property] === null) {\n                    continue;\n                }\n                if (item[property].toString().toLowerCase().includes(toCompare)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    };\n    return Ng2SearchPipe;\n}());\nNg2SearchPipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'filter',\n                pure: false\n            },] },\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nNg2SearchPipe.ctorParameters = function () { return []; };\nvar Ng2SearchPipeModule = /** @class */ (function () {\n    function Ng2SearchPipeModule() {\n    }\n    return Ng2SearchPipeModule;\n}());\nNg2SearchPipeModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [Ng2SearchPipe],\n                exports: [Ng2SearchPipe]\n            },] },\n];\n/**\n * @nocollapse\n */\nNg2SearchPipeModule.ctorParameters = function () { return []; };\n/**\n * Generated bundle index. Do not edit.\n */\nexport { Ng2SearchPipeModule, Ng2SearchPipe };\n//# sourceMappingURL=ng2-search-filter.es5.js.map\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nvar PaginationService = (function () {\r\n    function PaginationService() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    PaginationService.prototype.defaultId = function () { return this.DEFAULT_ID; };\r\n    PaginationService.prototype.register = function (instance) {\r\n        if (!instance.id) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            this.change.emit(instance.id);\r\n        }\r\n        else {\r\n            var changed = this.updateInstance(instance);\r\n            if (changed) {\r\n                this.change.emit(instance.id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    PaginationService.prototype.updateInstance = function (instance) {\r\n        var changed = false;\r\n        for (var prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    PaginationService.prototype.getCurrentPage = function (id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    PaginationService.prototype.setCurrentPage = function (id, page) {\r\n        if (this.instances[id]) {\r\n            var instance = this.instances[id];\r\n            var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    PaginationService.prototype.setTotalItems = function (id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    PaginationService.prototype.getInstance = function (id) {\r\n        if (id === void 0) { id = this.DEFAULT_ID; }\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    };\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    PaginationService.prototype.clone = function (obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    return PaginationService;\r\n}());\n\nvar LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nvar PaginatePipe = (function () {\r\n    function PaginatePipe(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    PaginatePipe.prototype.transform = function (collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (args instanceof Array) {\r\n            // compatible with angular2 before beta16\r\n            args = args[0];\r\n        }\r\n        if (!(collection instanceof Array)) {\r\n            var _id = args.id || this.service.defaultId;\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        var serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        var instance = this.createInstance(collection, args);\r\n        var id = instance.id;\r\n        var start, end;\r\n        var perPage = instance.itemsPerPage;\r\n        this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            var isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                var slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        // save the state for server-side collection to avoid null\r\n        // flash as new data loads.\r\n        this.saveState(id, collection, collection, start, end);\r\n        return collection;\r\n    };\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    PaginatePipe.prototype.createInstance = function (collection, args) {\r\n        var config = args;\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id || this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    };\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    PaginatePipe.prototype.checkConfig = function (config) {\r\n        var required = ['itemsPerPage', 'currentPage'];\r\n        var missing = required.filter(function (prop) { return !(prop in config); });\r\n        if (0 < missing.length) {\r\n            throw new Error(\"PaginatePipe: Argument is missing the following required properties: \" + missing.join(', '));\r\n        }\r\n    };\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    PaginatePipe.prototype.saveState = function (id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection: collection,\r\n            size: collection.length,\r\n            slice: slice,\r\n            start: start,\r\n            end: end\r\n        };\r\n    };\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    PaginatePipe.prototype.stateIsIdentical = function (id, collection, start, end) {\r\n        var state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        var isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every(function (element, index) { return element === collection[start + index]; });\r\n    };\r\n    PaginatePipe.decorators = [\r\n        { type: Pipe, args: [{\r\n                    name: 'paginate',\r\n                    pure: false\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    PaginatePipe.ctorParameters = function () { return [\r\n        { type: PaginationService, },\r\n    ]; };\r\n    return PaginatePipe;\r\n}());\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nvar DEFAULT_TEMPLATE = \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        role=\\\"navigation\\\" \\n        [attr.aria-label]=\\\"screenReaderPaginationLabel\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\" [attr.aria-label]=\\\"previousLabel + ' ' + screenReaderPageLabel\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ page.label }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ page.label }}</span> \\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\" [attr.aria-label]=\\\"nextLabel + ' ' + screenReaderPageLabel\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </pagination-template>\\n    \";\r\nvar DEFAULT_STYLES = \"\\n.ngx-pagination {\\n  margin-left: 0;\\n  margin-bottom: 1rem; }\\n  .ngx-pagination::before, .ngx-pagination::after {\\n    content: ' ';\\n    display: table; }\\n  .ngx-pagination::after {\\n    clear: both; }\\n  .ngx-pagination li {\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none;\\n    margin-right: 0.0625rem;\\n    border-radius: 0; }\\n  .ngx-pagination li {\\n    display: inline-block; }\\n  .ngx-pagination a,\\n  .ngx-pagination button {\\n    color: #0a0a0a; \\n    display: block;\\n    padding: 0.1875rem 0.625rem;\\n    border-radius: 0; }\\n    .ngx-pagination a:hover,\\n    .ngx-pagination button:hover {\\n      background: #e6e6e6; }\\n  .ngx-pagination .current {\\n    padding: 0.1875rem 0.625rem;\\n    background: #2199e8;\\n    color: #fefefe;\\n    cursor: default; }\\n  .ngx-pagination .disabled {\\n    padding: 0.1875rem 0.625rem;\\n    color: #cacaca;\\n    cursor: default; } \\n    .ngx-pagination .disabled:hover {\\n      background: transparent; }\\n  .ngx-pagination a, .ngx-pagination button {\\n    cursor: pointer; }\\n\\n.ngx-pagination .pagination-previous a::before,\\n.ngx-pagination .pagination-previous.disabled::before { \\n  content: '\\u00AB';\\n  display: inline-block;\\n  margin-right: 0.5rem; }\\n\\n.ngx-pagination .pagination-next a::after,\\n.ngx-pagination .pagination-next.disabled::after {\\n  content: '\\u00BB';\\n  display: inline-block;\\n  margin-left: 0.5rem; }\\n\\n.ngx-pagination .show-for-sr {\\n  position: absolute !important;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0); }\\n.ngx-pagination .small-screen {\\n  display: none; }\\n@media screen and (max-width: 601px) {\\n  .ngx-pagination.responsive .small-screen {\\n    display: inline-block; } \\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\\n    display: none; }\\n}\\n  \";\n\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nvar PaginationControlsComponent = (function () {\r\n    function PaginationControlsComponent() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = \"You're on page\";\r\n        this.pageChange = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"directionLinks\", {\r\n        get: function () {\r\n            return this._directionLinks;\r\n        },\r\n        set: function (value) {\r\n            this._directionLinks = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"autoHide\", {\r\n        get: function () {\r\n            return this._autoHide;\r\n        },\r\n        set: function (value) {\r\n            this._autoHide = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"responsive\", {\r\n        get: function () {\r\n            return this._responsive;\r\n        },\r\n        set: function (value) {\r\n            this._responsive = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PaginationControlsComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'pagination-controls',\r\n                    template: DEFAULT_TEMPLATE,\r\n                    styles: [DEFAULT_STYLES],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    PaginationControlsComponent.ctorParameters = function () { return []; };\r\n    PaginationControlsComponent.propDecorators = {\r\n        'id': [{ type: Input },],\r\n        'maxSize': [{ type: Input },],\r\n        'directionLinks': [{ type: Input },],\r\n        'autoHide': [{ type: Input },],\r\n        'responsive': [{ type: Input },],\r\n        'previousLabel': [{ type: Input },],\r\n        'nextLabel': [{ type: Input },],\r\n        'screenReaderPaginationLabel': [{ type: Input },],\r\n        'screenReaderPageLabel': [{ type: Input },],\r\n        'screenReaderCurrentLabel': [{ type: Input },],\r\n        'pageChange': [{ type: Output },],\r\n    };\r\n    return PaginationControlsComponent;\r\n}());\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nvar PaginationControlsDirective = (function () {\r\n    function PaginationControlsDirective(service, changeDetectorRef) {\r\n        var _this = this;\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(function (id) {\r\n            if (_this.id === id) {\r\n                _this.updatePageLinks();\r\n                _this.changeDetectorRef.markForCheck();\r\n                _this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    PaginationControlsDirective.prototype.ngOnInit = function () {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnChanges = function (changes) {\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnDestroy = function () {\r\n        this.changeSub.unsubscribe();\r\n    };\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    PaginationControlsDirective.prototype.previous = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    };\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    PaginationControlsDirective.prototype.next = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    };\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    PaginationControlsDirective.prototype.isFirstPage = function () {\r\n        return this.getCurrent() === 1;\r\n    };\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    PaginationControlsDirective.prototype.isLastPage = function () {\r\n        return this.getLastPage() === this.getCurrent();\r\n    };\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.setCurrent = function (page) {\r\n        this.pageChange.emit(page);\r\n    };\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.getCurrent = function () {\r\n        return this.service.getCurrentPage(this.id);\r\n    };\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    PaginationControlsDirective.prototype.getLastPage = function () {\r\n        var inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    };\r\n    PaginationControlsDirective.prototype.getTotalItems = function () {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    };\r\n    PaginationControlsDirective.prototype.checkValidId = function () {\r\n        if (!this.service.getInstance(this.id).id) {\r\n            console.warn(\"PaginationControlsDirective: the specified id \\\"\" + this.id + \"\\\" does not match any registered PaginationInstance\");\r\n        }\r\n    };\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    PaginationControlsDirective.prototype.updatePageLinks = function () {\r\n        var _this = this;\r\n        var inst = this.service.getInstance(this.id);\r\n        var correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(function () {\r\n                _this.setCurrent(correctedCurrentPage);\r\n                _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    };\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    PaginationControlsDirective.prototype.outOfBoundCorrection = function (instance) {\r\n        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    };\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    PaginationControlsDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        var pages = [];\r\n        var totalPages = Math.ceil(totalItems / itemsPerPage);\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        var isStart = currentPage <= halfWay;\r\n        var isEnd = totalPages - halfWay < currentPage;\r\n        var isMiddle = !isStart && !isEnd;\r\n        var ellipsesNeeded = paginationRange < totalPages;\r\n        var i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            var label = void 0;\r\n            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    };\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    PaginationControlsDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    };\r\n    PaginationControlsDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'pagination-template,[pagination-template]',\r\n                    exportAs: 'paginationApi'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    PaginationControlsDirective.ctorParameters = function () { return [\r\n        { type: PaginationService, },\r\n        { type: ChangeDetectorRef, },\r\n    ]; };\r\n    PaginationControlsDirective.propDecorators = {\r\n        'id': [{ type: Input },],\r\n        'maxSize': [{ type: Input },],\r\n        'pageChange': [{ type: Output },],\r\n    };\r\n    return PaginationControlsDirective;\r\n}());\n\nvar NgxPaginationModule = (function () {\r\n    function NgxPaginationModule() {\r\n    }\r\n    NgxPaginationModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [\r\n                        PaginatePipe,\r\n                        PaginationControlsComponent,\r\n                        PaginationControlsDirective\r\n                    ],\r\n                    providers: [PaginationService],\r\n                    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgxPaginationModule.ctorParameters = function () { return []; };\r\n    return NgxPaginationModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_STYLES as ɵb, DEFAULT_TEMPLATE as ɵa, NgxPaginationModule, PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe };\n","module.exports = \"<div>\\r\\n  <app-page-header [heading]=\\\"'Add Patient'\\\" [icon]=\\\"'fa-user-plus'\\\"></app-page-header>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col col-xl-12 col-lg-12 col-md-12 col-sm-12\\\">\\r\\n      <div class=\\\"card mb-3\\\">\\r\\n        <div class=\\\"card-header\\\">\\r\\n        </div>\\r\\n        <div class=\\\"card-body table-responsive\\\">\\r\\n          <div class=\\\"col-lg-10 offset-1\\\">\\r\\n            <form role=\\\"form\\\">             \\r\\n              <div class=\\\"row py-3\\\">\\r\\n                <h4>{{msg}}</h4>\\r\\n              </div>\\r\\n              <fieldset class=\\\"form-group\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <label class=\\\"col-md-2\\\">First Name:</label>\\r\\n                  <div class=\\\"input-group mb-3 col-md-6 \\\">\\r\\n                    <div class=\\\"input-group-prepend\\\">\\r\\n                      <span class=\\\"input-group-text\\\" id=\\\"basic-addon1\\\">\\r\\n                        <li class=\\\"fa fa-user\\\"></li>\\r\\n                      </span>\\r\\n                    </div>\\r\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"FirstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\" class=\\\"form-control\\\" placeholder=\\\"First Name\\\"\\r\\n                      aria-label=\\\"FirstName\\\" aria-describedby=\\\"basic-addon1\\\">\\r\\n                  </div>\\r\\n                </div>\\r\\n              </fieldset>\\r\\n\\r\\n              <!-- Surname -->\\r\\n              <fieldset class=\\\"form-group\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <label class=\\\"col-md-2\\\">Surname:</label>\\r\\n                  <div class=\\\"input-group mb-3 col-md-6 \\\">\\r\\n                    <div class=\\\"input-group-prepend\\\">\\r\\n                      <span class=\\\"input-group-text\\\" id=\\\"basic-addon1\\\">\\r\\n                        <li class=\\\"fa fa-user\\\"></li>\\r\\n                      </span>\\r\\n                    </div>\\r\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"Surname\\\" [ngModelOptions]=\\\"{standalone: true}\\\" class=\\\"form-control\\\" placeholder=\\\"Surname\\\"\\r\\n                      aria-label=\\\"Surname\\\" aria-describedby=\\\"basic-addon1\\\">\\r\\n                  </div>\\r\\n                </div>\\r\\n              </fieldset>\\r\\n\\r\\n              <!-- Email -->\\r\\n              <fieldset class=\\\"form-group\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <label class=\\\"col-md-2\\\">Email:</label>\\r\\n                  <div class=\\\"input-group mb-3 col-md-6 \\\">\\r\\n                    <div class=\\\"input-group-prepend\\\">\\r\\n                      <span class=\\\"input-group-text\\\" id=\\\"basic-addon1\\\">\\r\\n                        <li class=\\\"fa fa-envelope\\\"></li>\\r\\n                      </span>\\r\\n                    </div>\\r\\n                    <input type=\\\"email\\\" [(ngModel)]=\\\"Email\\\" [ngModelOptions]=\\\"{standalone: true}\\\" class=\\\"form-control\\\" placeholder=\\\"Email\\\" aria-label=\\\"Email\\\"\\r\\n                      aria-describedby=\\\"basic-addon1\\\">\\r\\n                  </div>\\r\\n                </div>\\r\\n              </fieldset>\\r\\n\\r\\n              <!-- Cellphone -->\\r\\n              <fieldset class=\\\"form-group\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <label class=\\\"col-md-2\\\">Cellphone #:</label>\\r\\n                  <div class=\\\"input-group mb-3 col-md-6 \\\">\\r\\n                    <div class=\\\"input-group-prepend\\\">\\r\\n                      <span class=\\\"input-group-text\\\" id=\\\"basic-addon1\\\">\\r\\n                        <li class=\\\"fa fa-phone\\\"></li>\\r\\n                      </span>\\r\\n                    </div>\\r\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"Cellphone\\\" [ngModelOptions]=\\\"{standalone: true}\\\" class=\\\"form-control\\\" placeholder=\\\"Cellphone Number\\\"\\r\\n                      aria-label=\\\"Cellphone\\\" aria-describedby=\\\"basic-addon1\\\">\\r\\n                  </div>\\r\\n                </div>\\r\\n              </fieldset>\\r\\n\\r\\n              <!-- AddressLine1 -->\\r\\n              <fieldset class=\\\"form-group\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <label class=\\\"col-md-2\\\">Address Line 1:</label>\\r\\n                  <div class=\\\"input-group mb-3 col-md-6 \\\">\\r\\n                    <div class=\\\"input-group-prepend\\\">\\r\\n                      <span class=\\\"input-group-text\\\" id=\\\"basic-addon1\\\">\\r\\n                        <li class=\\\"fa fa-home\\\"></li>\\r\\n                      </span>\\r\\n                    </div>\\r\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"AddressLine1\\\" [ngModelOptions]=\\\"{standalone: true}\\\" class=\\\"form-control\\\" placeholder=\\\"Address Line 1\\\"\\r\\n                      aria-label=\\\"AddressLine1\\\" aria-describedby=\\\"basic-addon1\\\">\\r\\n                  </div>\\r\\n                </div>\\r\\n              </fieldset>\\r\\n\\r\\n              <!-- AddressLine2 -->\\r\\n              <fieldset class=\\\"form-group\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <label class=\\\"col-md-2\\\">Address Line 2:</label>\\r\\n                  <div class=\\\"input-group mb-3 col-md-6 \\\">\\r\\n                    <div class=\\\"input-group-prepend\\\">\\r\\n                      <span class=\\\"input-group-text\\\" id=\\\"basic-addon1\\\">\\r\\n                        <li class=\\\"fa fa-home\\\"></li>\\r\\n                      </span>\\r\\n                    </div>\\r\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"AddressLine2\\\" [ngModelOptions]=\\\"{standalone: true}\\\" class=\\\"form-control\\\" placeholder=\\\"AddressLine2\\\"\\r\\n                      aria-label=\\\"AddressLine2\\\" aria-describedby=\\\"basic-addon1\\\">\\r\\n                  </div>\\r\\n                </div>\\r\\n              </fieldset>\\r\\n\\r\\n              <!--AddressLine3-->\\r\\n              <fieldset class=\\\"form-group\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <label class=\\\"col-md-2\\\">Address Line 3:</label>\\r\\n                  <div class=\\\"input-group mb-3 col-md-6 \\\">\\r\\n                    <div class=\\\"input-group-prepend\\\">\\r\\n                      <span class=\\\"input-group-text\\\" id=\\\"basic-addon1\\\">\\r\\n                        <li class=\\\"fa fa-home\\\"></li>\\r\\n                      </span>\\r\\n                    </div>\\r\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"AddressLine3\\\" [ngModelOptions]=\\\"{standalone: true}\\\" class=\\\"form-control\\\" placeholder=\\\"Address Line 3\\\"\\r\\n                      aria-label=\\\"AddressLine3\\\" aria-describedby=\\\"basic-addon1\\\">\\r\\n                  </div>\\r\\n                </div>\\r\\n              </fieldset>\\r\\n\\r\\n              <!--City-->\\r\\n              <fieldset class=\\\"form-group\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <label class=\\\"col-md-2\\\">City:</label>\\r\\n                  <div class=\\\"input-group mb-3 col-md-6 \\\">\\r\\n                    <div class=\\\"input-group-prepend\\\">\\r\\n                      <span class=\\\"input-group-text\\\" id=\\\"basic-addon1\\\">\\r\\n                        <li class=\\\"fa fa-home\\\"></li>\\r\\n                      </span>\\r\\n                    </div>\\r\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"City\\\" [ngModelOptions]=\\\"{standalone: true}\\\" class=\\\"form-control\\\" placeholder=\\\"City\\\" aria-label=\\\"City\\\"\\r\\n                      aria-describedby=\\\"basic-addon1\\\">\\r\\n                  </div>\\r\\n                </div>\\r\\n              </fieldset>\\r\\n\\r\\n              <!--PostCode-->\\r\\n              <fieldset class=\\\"form-group\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <label class=\\\"col-md-2\\\">PostCode:</label>\\r\\n                  <div class=\\\"input-group mb-3 col-md-6 \\\">\\r\\n                    <div class=\\\"input-group-prepend\\\">\\r\\n                      <span class=\\\"input-group-text\\\" id=\\\"basic-addon1\\\">\\r\\n                        <li class=\\\"fa fa-home\\\"></li>\\r\\n                      </span>\\r\\n                    </div>\\r\\n                    <input type=\\\"text\\\" [(ngModel)]=\\\"PostCode\\\" [ngModelOptions]=\\\"{standalone: true}\\\" class=\\\"form-control\\\" placeholder=\\\"Postal Code\\\"\\r\\n                      aria-label=\\\"PostCode\\\" aria-describedby=\\\"basic-addon1\\\">\\r\\n                  </div>\\r\\n                </div>\\r\\n              </fieldset>\\r\\n              <div class=\\\"justify-content-center\\\">\\r\\n                <a  class=\\\"btn rounded-btn\\\" (click)=\\\"add()\\\">Add Patient</a> &nbsp;\\r\\n                <a  class=\\\"btn rounded-btn\\\" [routerLink]=\\\"['/patients']\\\">Abort</a>\\r\\n              </div>\\r\\n            </form>\\r\\n\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n</div>\"","module.exports = \".justify-content-center {\\n  display: flex !important;\\n  justify-content: center !important;\\n  padding-top: 2%; }\\n\\n.rounded-btn {\\n  border-radius: 50px;\\n  color: #0c0c0c;\\n  border: 2px solid rgba(14, 13, 13, 0.8);\\n  font-size: 18px;\\n  line-height: 40px;\\n  padding: 0 25px; }\\n\\n.rounded-btn:hover,\\n.rounded-btn:focus,\\n.rounded-btn:active,\\n.rounded-btn:visited {\\n  color: #0c0c0c;\\n  border: 2px solid #04034d;\\n  outline: none; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { PatientService } from '../../../services';\r\n \r\n\r\n@Component({\r\n  selector: 'app-add-patient',\r\n  templateUrl: './add-patient.component.html',\r\n  styleUrls: ['./add-patient.component.scss']\r\n})\r\nexport class AddPatientComponent implements OnInit {\r\n\r\n  FirstName: string;\r\n  Surname: string;\r\n  Email: string;\r\n  Cellphone: string;\r\n  AddressLine1: string;\r\n  AddressLine2: string;\r\n  AddressLine3: string;\r\n  City: string;\r\n  PostCode: string;  \r\n  msg :string;\r\n  constructor(    private router : Router,\r\n                  private patientService: PatientService) {\r\n    \r\n   }\r\n  \r\n  ngOnInit() {\r\n  }\r\n\r\n  add(){ \r\n    this.msg = undefined;\r\n    if(this.Email == undefined || this.Email === '') {\r\n      this.msg = \"Please fill in Required Fields\";\r\n      return false;\r\n    }\r\n    if(this.FirstName === undefined || this.FirstName === '') {\r\n      this.msg = \"Please fill in Required Fields\";\r\n      return false;\r\n    }\r\n    if(this.Surname === undefined || this.Surname === '') {\r\n      this.msg = \"Please fill in Required Fields\";\r\n      return false;\r\n    }\r\n    if(this.Cellphone === undefined || this.Cellphone === '') {\r\n      this.msg = \"Please fill in Required Fields\";\r\n      return false;\r\n    }\r\n    if(this.AddressLine1 === undefined || this.AddressLine1 === '') {\r\n      this.msg = \"Please fill in Required Fields\";\r\n      return false;\r\n    }\r\n    if(this.AddressLine2 === undefined || this.AddressLine2 === '') {\r\n      this.msg = \"Please fill in Required Fields\";\r\n      return false;\r\n    }\r\n    if(this.AddressLine3 === undefined || this.AddressLine3 === '') {\r\n      this.AddressLine3 = \" \";       \r\n    }\r\n    if(this.City === undefined || this.City === '') {\r\n      this.msg = \"Please fill in Required Fields\";\r\n      return false;\r\n    }\r\n    if(this.PostCode === undefined || this.PostCode === '') {\r\n      this.msg = \"Please fill in Required Fields\";\r\n      return false;\r\n    }\r\n\r\n    let data = {\r\n      FirstName: this.FirstName,\r\n      Surname: this.Surname ,\r\n      Email: this.Email ,\r\n      Cellphone: this.Cellphone ,\r\n      AddressLine1: this.AddressLine1 ,\r\n      AddressLine2: this.AddressLine2 ,\r\n      AddressLine3: this.AddressLine3 ,\r\n      City: this.City ,\r\n      PostCode: this.PostCode ,\r\n      // GlobalKey: this.GlobalKey ,\r\n      // CreateUserId: this.CreateUserId,\r\n      // CreateDate: this.CreateDate ,\r\n      // ModifyUserId: this.ModifyUserId,\r\n      // ModifyDate: this.ModifyDate,\r\n      // StatusId: this.StatusId;\r\n      \r\n    };\r\n     this.patientService.addPatient(data)\r\n     .subscribe(response => {\r\n        if(response == 1){\r\n          alert (\"patient added successfully\")\r\n        }\r\n     });\r\n    \r\n  }\r\n\r\n}\r\n","export * from './add-patient.component'","export * from './list-patients.component'","module.exports = \"<div>\\r\\n  <app-page-header [heading]=\\\"'Patients'\\\" [icon]=\\\"'fa-users'\\\"></app-page-header>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col col-xl-12 col-lg-12 col-md-12 col-sm-12\\\">\\r\\n      <div class=\\\"card mb-3\\\">\\r\\n        <div class=\\\"card-header\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-6\\\">\\r\\n              <a class=\\\"btn rounded-btn\\\" [routerLink]=\\\"['/patients/add']\\\">Add Patient </a>\\r\\n            </div>\\r\\n            <div class=\\\"input-group mb-3 col-md-6\\\">\\r\\n              <div class=\\\"input-group-prepend\\\">\\r\\n                <span class=\\\"input-group-text\\\" id=\\\"basic-addon1\\\">\\r\\n                  <li class=\\\"fa fa-search\\\"></li>\\r\\n                </span>\\r\\n              </div>\\r\\n              <input type=\\\"text\\\" [(ngModel)]=\\\"searchText\\\" [ngModelOptions]=\\\"{standalone: true}\\\" class=\\\"form-control\\\" placeholder=\\\"Search...\\\"\\r\\n                aria-label=\\\"Search\\\" aria-describedby=\\\"basic-addon1\\\">\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"card-body table-responsive\\\">\\r\\n          <table class=\\\"table table-bordered\\\" *ngIf=\\\"patients$ | async as patients\\\">\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th>#</th>\\r\\n                <th>First Name</th>\\r\\n                <th>Surname</th>\\r\\n                <th>Email</th>\\r\\n                <th>Cellphone</th>\\r\\n                <th>City</th>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              <tr *ngFor=\\\"let item of patients | filter: searchText | paginate: { itemsPerPage: 10, currentPage: p }\\\">\\r\\n                <th scope=\\\"row\\\">{{item.PatientId}}</th>\\r\\n                <td>{{item.FirstName}}</td>\\r\\n                <td>{{item.Surname}}</td>\\r\\n                <td>{{item.Email}}</td>\\r\\n                <td>{{item.Cellphone}}</td>\\r\\n                <td>{{item.City}}</td>\\r\\n              </tr>\\r\\n            </tbody>\\r\\n          </table>\\r\\n          <div class=\\\"justify-content-center\\\">\\r\\n            <pagination-controls (pageChange)=\\\"p = $event\\\"></pagination-controls>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n</div>\"","module.exports = \".justify-content-center {\\n  display: flex !important;\\n  justify-content: center !important;\\n  padding-top: 2%; }\\n\\n.rounded-btn {\\n  border-radius: 50px;\\n  color: #0c0c0c;\\n  border: 2px solid rgba(14, 13, 13, 0.8);\\n  font-size: 18px;\\n  line-height: 40px;\\n  padding: 0 25px; }\\n\\n.rounded-btn:hover,\\n.rounded-btn:focus,\\n.rounded-btn:active,\\n.rounded-btn:visited {\\n  color: #0c0c0c;\\n  border: 2px solid #04034d;\\n  outline: none; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { SelectService } from '../../../shared';\r\nimport { Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-list-patients',\r\n  templateUrl: './list-patients.component.html',\r\n  styleUrls: ['./list-patients.component.scss']\r\n})\r\nexport class ListPatientsComponent implements OnInit {\r\n\r\n  patients$ : Observable<any>;  \r\n  searchText:string;\r\n  constructor(\r\n    private selectService : SelectService \r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.patients$ = this.selectService.select(\"patient WHERE  StatusId = 1 ORDER BY CreateDate DESC \");\r\n  }\r\n\r\n}\r\n","import { PatientsRoutes } from './patients.routing';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PageHeaderModule } from '../../shared'; \r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\r\nimport {NgxPaginationModule} from 'ngx-pagination';\r\nimport { ListPatientsComponent } from './list-patients';\r\nimport { AddPatientComponent } from './add-patient';\r\nimport { PatientService } from '../../services';\r\n \r\n\r\n\r\n \r\n@NgModule({\r\n    imports: [CommonModule,FormsModule,Ng2SearchPipeModule,NgxPaginationModule,\r\n        ReactiveFormsModule, PatientsRoutes, PageHeaderModule ],\r\n    declarations: [ListPatientsComponent, AddPatientComponent],\r\n    providers: [PatientService]\r\n})\r\n\r\nexport class PatientsModule {}\r\n","import { NgModule } from '@angular/core'; \r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ListPatientsComponent } from './list-patients';\r\nimport { AddPatientComponent } from './add-patient';\r\n \r\n \r\n\r\nconst routes: Routes = [\r\n  { \r\n    path: '', component : ListPatientsComponent    \r\n  },\r\n  { \r\n    path: 'add', component : AddPatientComponent    \r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class PatientsRoutes {}\r\n"],"sourceRoot":""}